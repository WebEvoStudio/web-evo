[
  {
    "id": "2",
    "title": "vue全局提示插件开发-toast",
    "mark_content":"**前言**\n\n在没有封装插件之前，如果不使用第三方插件，那么很多情况下我们会编写几个常用的组件来提供给页面使用，如Alert/Loading组件，而你可能需要在很多页面中引入并且通过components注册组件，但是像这样使用率很高的组件一般我们希望全局注册后直接就可以在相应页面使用，因此我们需要将他们封装成插件，这里我们编写一个toast全局提示插件来作个简单的介绍\n\n**插件**\n\n```\n插件通常用来为 Vue 添加全局功能。插件的功能范围没有严格的限制——一般有下面几种：\n\n1.添加全局方法或者 property。\n\n2.添加全局资源：指令/过滤器/过渡等。\n\n3.通过全局混入来添加一些组件选项。\n\n4.添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现。\n\n5.一个库，提供自己的 API，同时提供上面提到的一个或多个功能。\n```\n\nvue插件的编写方法一般分为以上5类，其注册与绑定机制如下：\n\n```\nexport default {\n    install(Vue, options) {\n        Vue.myGlobalMethod = function () {  // 1. 添加全局方法或属性，如:  vue-custom-element\n            // 逻辑...\n        }\n        Vue.directive('my-directive', {  // 2. 添加全局资源：指令/过滤器/过渡等，如 vue-touch\n            bind (el, binding, vnode, oldVnode) {\n                // 逻辑...\n            }\n            ...\n        })\n        Vue.mixin({\n            created: function () {  // 3. 通过全局 mixin方法添加一些组件选项，如: vuex\n                // 逻辑...\n            }\n            ...\n        })\n        Vue.prototype.$myMethod = function (options) {  // 4. 添加实例方法，通过把它们添加到 Vue.prototype 上实现\n            // 逻辑...\n        }\n    }\n}\n```\n\n\\\n上方代码使用了es6部分语法列出了4种编写插件的方法，而install是注册插件主要调用的方法，包含了两个参数（Vue实例和自定义配置属性options）\n\n**开发插件**\n\n我们这里主要使用的是第四种方法，将我们的插件函数注册到Vue.prototype实例上面\\\n首先我们在plugin里创建个toast文件夹用来放置插件,里面包含两个文件，toast.vue和toast.js，\n\n\\\n\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3762e7487fa745d5a732f5e9697196ee~tplv-k3u1fbpfcp-zoom-1.image)\n\n\\\n\n\n然后在编写我们的样式结构文件toast.vue\n\n这里我们使用了一个visible变量来控制提示框的显示，message为提示的消息\n\n```\n<template>\n      <div v-if=\"visible\">\n          <div>{{message}}</div>\n      </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      visible: false,\n      message: \"\"\n    };\n  }\n};\n</script>\n```\n\n\\\n接着在toast.js里面编写插件的方法与处理函数\n\n```\nimport ToastComponent from './toast.vue'    //引入toast.vue组件\n\nexport default {    // 导出一个对象，里面包含vue注册插件所调用的方法install\n    install: function (Vue) {\n        const ToastConstructor = Vue.extend(ToastComponent)    // 将toast.vue组件生成为Vue的子类\n        const instance = new ToastConstructor();    // 生成一个该子类的实例\n\n        instance.$mount(document.createElement('div'))    // 将这个实例挂载在新创建的div上，并加入到body中\n        document.body.appendChild(instance.$el)\n\n        // 通过Vue的原型注册一个方法$toast，有两个参数（msg为提示的文字，duration为延时关闭）\n        Vue.prototype.$toast = (msg, duration = 1500) => {\n            if (instance.visible) return;    // visible是toast.vue组件的一个变量，用来控制提示框的显示\n\n            instance.message = msg;\n            instance.visible = true;\n\n            setTimeout(() => {    // 默认延时1.5s关闭提示框\n                instance.visible = false;\n            }, duration);\n        }\n    }\n}\n```\n\n\\\n这样我们就完成了组件的封装，是不是很简单\n\n**使用插件**\n\n现在把我们封装好的插件引入到main.js中\n\n```\nimport toast from './plugin/toast'\nVue.use(toast);\n```\n\n\\\n然后我们就可以在组件中使用它了\n\n```\nthis.$toast('提示文字')\n```\n\n我们现在把toast.vue添加上样式和过度效果，让它看起来更加的友好，以下是toast.vue文件的全部内容\n\n```\n<template>\n   <!-- 全局提示框 -->\n   <transition name=\"slide-fade\">\n      <div v-if=\"visible\" class=\"dialog-tips\">\n          <div>{{message}}</div>\n      </div>\n  </transition>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      visible: false,\n      message: \"\"\n    };\n  }\n};\n</script>\n<style scoped>\n.dialog-tips{\n    min-width: 380px;\n    box-sizing: border-box;\n    border-radius: 4px;\n    border: 1px solid #e1f3d8;\n    position: fixed;\n    left: 50%;\n    top: 20px;\n    transform: translateX(-50%);\n    background-color: #f0f9eb;\n    overflow: hidden;\n    padding: 15px 15px 15px 20px;\n    display: flex;\n    align-items: center;\n    color: #67c23a;\n}\n\n.slide-fade-enter, .slide-fade-leave-to {\n  margin-top:-30px;\n  opacity: 0;\n\n}\n\n.slide-fade-enter-active,.slide-fade-leave-active {\n  transition: all .3s ease;\n}\n\n.slide-fade-enter-to,.slide-fade-leave {\n  margin-top:0px;\n  opacity:1;\n}\n</style>\n```\n\n\\\n让我们来看看效果\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6174dcccd564c12ac1a757c04726898~tplv-k3u1fbpfcp-zoom-1.image)\n\n\\\n\n\n**结语**\n\n以上我们就实现了一个简单的toast插件，开发插件的方式和插件的类型有很多种，这里只是介绍了其中的一种方式，帮助大家了解在编写插件的过程中所用到的方法，大家也可以使用其它方法来去开发不同类型的插件。"
  }
]
